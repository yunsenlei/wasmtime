initSidebarItems({"enum":[["Command","Represents supported commands to the `instantiate_many` function."],["Timeout","Methods of timing out execution of a WebAssembly module"]],"fn":[["differential_execution","Instantiate the given Wasm module with each `Config` and call all of its exports. Modulo OOM, non-canonical NaNs, and usage of Wasm features that are or aren’t enabled for different configs, we should get the same results when we call the exported functions for all of our different configs."],["differential_spec_execution","Perform differential execution between Wasmtime and the official WebAssembly specification interpreter."],["differential_v8_execution","Performs differential execution between Wasmtime and V8."],["differential_wasmi_execution","Perform differential execution between Cranelift and wasmi, diffing the resulting memory image when execution terminates. This relies on the module-under-test to be instrumented to bound the execution time. Invoke with a module generated by `wasm-smith` using the `SingleFunctionModuleConfig` configuration type for best results."],["instantiate","Instantiate the Wasm buffer, and implicitly fail if we have an unexpected panic or segfault or anything else that can be detected “passively”."],["instantiate_many","Instantiates many instances from the given modules."],["log_wasm","Logs a wasm file to the filesystem to make it easy to figure out what wasm was used when debugging."],["make_api_calls","Invoke the given API calls."],["spectest","Executes the wast `test` spectest with the `config` specified."],["table_ops","Execute a series of `table.get` and `table.set` operations."]],"mod":[["dummy","Dummy implementations of things that a Wasm module can import."]],"struct":[["StoreLimits","The `T` in `Store<T>` for fuzzing stores, used to limit resource consumption during fuzzing."]]});